import 'package:diy_boox/core/utils/app_constants.dart';
import 'package:diy_boox/core/utils/color_constant.dart';
import 'package:diy_boox/core/utils/custom_toast.dart';
import 'package:diy_boox/provider/business_provider.dart';
import 'package:diy_boox/provider/payment_due_provider.dart';
import 'package:diy_boox/screens/home_screen.dart';
import 'package:diy_boox/widgets/common_text_field.dart';
import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../../../../widgets/custom_small_button.dart';
import '../../../../widgets/custom_small_trans_button.dart';

class Invoices extends StatefulWidget {
  const Invoices({Key? key}) : super(key: key);

  @override
  State<Invoices> createState() => _InvoicesState();
}

class _InvoicesState extends State<Invoices> {
  final List<String> items = [
    'Bank transfer',
    'Cheque',
    'Cash',
    'Card',
    'DD',
  ];
  String? selectedValue = "Bank transfer";

  bool valuee = false;

  bool radio1 = true;

  String taxSelected = ""; //Manual - 0.0
  String dueSelected = "On receipt";

  String? gender;

  @override
  void initState() {
    final bProvider = Provider.of<BusinessProvider>(context, listen: false);
    bProvider.getBusinessList(loadOthers: false);
    bProvider.getBusinessTax();

    final paymentProvider =
        Provider.of<PaymentDueProvider>(context, listen: false);
    paymentProvider.getPaymentDueList();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    CustomToast.init(context);
    return Scaffold(
      body: Consumer<BusinessProvider>(
        builder: (context, value, child) {
          if (value.isLoading) {
            child = const Center(
              child: CircularProgressIndicator(
                color: Color(0xff6661B8),
              ),
            );
          } else {
            final selectedB = value.selectedBusiness;
            final taxValue = value.businessTaxList.firstWhere(
                (element) => element.universalId == selectedB.defaultTaxId);

            gender = selectedB.isInvoiceIdAutoGenerated
                ? "Autogenerated"
                : "Add manually";
            child = SingleChildScrollView(
              child: Column(
                children: [
                  RadioListTile(
                    selected: selectedB.isInvoiceIdAutoGenerated,
                    activeColor: ColorConstant.primaryColor1,
                    title: Text(
                      'Autogenerated',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w400,
                        fontFamily: 'Poppins',
                        color: Color(0xff424A5D),
                      ),
                    ),
                    value: "Autogenerated",
                    groupValue: gender,
                    onChanged: (valu) {
                      value.updateSelectedType(true);
                    },
                  ),
                  RadioListTile(
                    selected: !selectedB.isInvoiceIdAutoGenerated,
                    activeColor: ColorConstant.primaryColor1,
                    title: Text(
                      'Add manually',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w400,
                        fontFamily: 'Poppins',
                        color: Color(0xff424A5D),
                      ),
                    ),
                    value: "Add manually",
                    groupValue: gender,
                    onChanged: (valu) {
                      value.updateSelectedType(false);
                    },
                  ),
                  selectedB.isInvoiceIdAutoGenerated
                      ? Padding(
                          padding: EdgeInsets.fromLTRB(20, 20, 20, 0),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text(
                                      'Prefix',
                                      style: TextStyle(
                                        fontSize: 14,
                                        fontWeight: FontWeight.w600,
                                        fontFamily: 'Poppins',
                                        color: Color(0xff000000),
                                      ),
                                    ),
                                    SizedBox(
                                      height: 10,
                                    ),
                                    CommonTextField(
                                      controller: TextEditingController(
                                          text: selectedB.invoicePrefix
                                              .toString()),
                                      onChanged: (e) {},
                                      padding: EdgeInsets.fromLTRB(0, 0, 20, 0),
                                    )
                                  ],
                                ),
                              ),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text(
                                      'Next number',
                                      style: TextStyle(
                                        fontSize: 14,
                                        fontWeight: FontWeight.w600,
                                        fontFamily: 'Poppins',
                                        color: Color(0xff000000),
                                      ),
                                    ),
                                    SizedBox(
                                      height: 10,
                                    ),
                                    CommonTextField(
                                      controller: TextEditingController(
                                          text: selectedB.invoiceNextNumber
                                              .toString()),
                                      kType: TextInputType.number,
                                      onChanged: (e) {},
                                      padding: EdgeInsets.fromLTRB(0, 0, 20, 0),
                                    )
                                  ],
                                ),
                              ),
                            ],
                          ),
                        )
                      : SizedBox.shrink(),
                  const Padding(
                    padding: const EdgeInsets.fromLTRB(20, 20, 0, 0),
                    child: Row(
                      children: [
                        Text(
                          'Payment method',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            fontFamily: 'Poppins',
                            color: Color(0xff000000),
                          ),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.fromLTRB(20, 10, 20, 0),
                    child: Container(
                        height: 46,
                        width: MediaQuery.of(context).size.width,
                        decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(5),
                            boxShadow: [
                              BoxShadow(blurRadius: 1, spreadRadius: 0.1)
                            ]),
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton2(
                            style: TextStyle(
                              fontWeight: FontWeight.w300,
                              fontSize: 14,
                              fontFamily: 'Sans',
                              color: Color(0xff404A5F),
                            ),
                            items: items
                                .map((item) => DropdownMenuItem<String>(
                                      value: item,
                                      child: Text(
                                        item,
                                        style: const TextStyle(
                                          fontSize: 14,
                                        ),
                                      ),
                                    ))
                                .toList(),
                            value: selectedValue,
                            onChanged: (value) {
                              setState(() {
                                selectedValue = value.toString();
                              });
                            },
                          ),
                        )),
                  ),
                  const Padding(
                    padding: const EdgeInsets.fromLTRB(20, 20, 0, 0),
                    child: Row(
                      children: [
                        Text(
                          'Payment due term',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            fontFamily: 'Poppins',
                            color: Color(0xff000000),
                          ),
                        ),
                      ],
                    ),
                  ),
                  Consumer<PaymentDueProvider>(
                    builder: (context, dueValue, child) {
                      if (value.isLoading) {
                        child = SizedBox.shrink();
                      } else {
                        child = Padding(
                          padding: EdgeInsets.fromLTRB(20, 10, 20, 0),
                          child: Container(
                              height: 46,
                              width: MediaQuery.of(context).size.width,
                              decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(5),
                                  boxShadow: [
                                    BoxShadow(blurRadius: 1, spreadRadius: 0.1)
                                  ]),
                              child: DropdownButtonHideUnderline(
                                child: DropdownButton2(
                                  style: TextStyle(
                                    fontWeight: FontWeight.w300,
                                    fontSize: 14,
                                    fontFamily: 'Sans',
                                    color: Color(0xff404A5F),
                                  ),
                                  value: dueSelected,
                                  items: dueValue.paymentDueList
                                      .map((item) => DropdownMenuItem<String>(
                                            value: item.name,
                                            child: Text(
                                              item.name,
                                              style: const TextStyle(
                                                fontSize: 14,
                                              ),
                                            ),
                                          ))
                                      .toList(),
                                  onChanged: (value) {},
                                ),
                              )),
                        );
                      }
                      return child;
                    },
                  ),
                  Padding(
                    padding: const EdgeInsets.fromLTRB(0, 10, 0, 0),
                    child: CheckboxListTile(
                      onChanged: (e) {
                        value.updateVAT(e!);
                      },
                      activeColor: ColorConstant.primaryColor1,
                      value: selectedB.isVatRegistered,
                      controlAffinity: ListTileControlAffinity.leading,
                      title: Text(
                        "VAT Registered",
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w400,
                          fontFamily: 'Poppins',
                          color: Color(0xff404A5F),
                        ),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.fromLTRB(20, 10, 0, 0),
                    child: Row(
                      children: [
                        Text(
                          'VAT',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            fontFamily: 'Poppins',
                            color: Color(0xff000000),
                          ),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.fromLTRB(20, 10, 20, 0),
                    child: Container(
                        height: 46,
                        width: MediaQuery.of(context).size.width,
                        decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(5),
                            boxShadow: [
                              BoxShadow(blurRadius: 1, spreadRadius: 0.1)
                            ]),
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton2(
                            style: TextStyle(
                              fontWeight: FontWeight.w300,
                              fontSize: 14,
                              fontFamily: 'Sans',
                              color: Color(0xff404A5F),
                            ),
                            value: taxSelected == ""
                                ? "${taxValue.name} - ${taxValue.rate}"
                                : taxSelected,
                            items: value.businessTaxList
                                .map((item) => DropdownMenuItem<String>(
                                      value: "${item.name} - ${item.rate}",
                                      child: Text(
                                        "${item.name} - ${item.rate}",
                                        style: const TextStyle(
                                          fontSize: 14,
                                        ),
                                      ),
                                    ))
                                .toList(),
                            onChanged: (valu) {
                              setState(() {
                                taxSelected = valu.toString();
                              });
                              value.selectedBusiness.defaultTaxId;
                            },
                          ),
                        )),
                  ),
                  const Padding(
                    padding: const EdgeInsets.all(20),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'Payment Details',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            fontFamily: 'Poppins',
                            color: Color(0xff000000),
                          ),
                        ),
                        Text(
                          'Add new line',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w400,
                            fontFamily: 'Poppins',
                            color: Color(0xff000000),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: const EdgeInsets.fromLTRB(20, 160, 20, 20),
                    child: Row(
                      children: [
                        Text(
                          'Add Payment due',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w400,
                            fontFamily: 'Poppins',
                            color: Color(0xff462A68),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: const EdgeInsets.all(20),
                    child: Row(
                      children: [
                        Text(
                          'Footer',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            fontFamily: 'Poppins',
                            color: Color(0xff000000),
                          ),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.fromLTRB(0, 0, 0, 20),
                    child: SizedBox(
                      height: 160,
                      width: MediaQuery.of(context).size.width,
                      child: CommonTextField(
                        controller: TextEditingController(
                            text: selectedB.invoiceFooter),
                        onChanged: (e) {
                          value.updateFooter(e);
                        },
                      ),
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.fromLTRB(20, 0, 20, 40),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        CustomSmallButton(
                          text: 'Save',
                          onTap: () {
                            final body = {
                              "userId": value.sharedPreferences
                                  .getString(AppConstants.USERID),
                              "universalId": selectedB.universalId,
                              "isInvoiceIdAutoGenerated":
                                  selectedB.isInvoiceIdAutoGenerated,
                              "invoicePreFix": selectedB.invoicePrefix,
                              "invoiceNextNumber": selectedB.invoiceNextNumber,
                              "invoicePaymentMethodId":
                                  selectedB.invoicePaymentMethodId,
                              "invoicePaymentDueTermsId":
                                  selectedB.invoicePaymentDueTermsId,
                              "defaultTaxId":
                                  "7a0c56ae-9b4d-4d75-8229-44dab8a39684",
                              "invoiceFooter": selectedB.invoiceFooter,
                              "isVatRegistered": selectedB.isVatRegistered,
                            };
                            Provider.of<BusinessProvider>(context,
                                    listen: false)
                                .updateInvoiceInfo(body)
                                .whenComplete(() => CustomToast.showToast(
                                    message:
                                        "Invoice settings updated successfully"));
                          },
                        ),
                        CustomSmallTransButton(
                            onTap: () {
                              Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                      builder: (context) => HomeScreen()));
                            },
                            text: 'Cancel'),
                      ],
                    ),
                  ),
                ],
              ),
            );
          }
          return child;
        },
      ),
    );
  }
}
